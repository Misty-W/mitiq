---
jupytext:
  text_representation:
    extension: .myst
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.10.3
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# Example of learning quasiprobability representations from Clifford circuit data and using the resulting representations in `execute_w_pec`

```{code-cell} ipython3
import numpy as np
import cirq
from cirq import DensityMatrixSimulator, Circuit
from mitiq import Observable, PauliString, pec
from mitiq.interface import convert_to_mitiq, mitiq_cirq
from mitiq.pec.representations.learning_based import learn_representations
```

## Set up example circuit in Cirq:

```{code-cell} ipython3
a, b = cirq.LineQubit.range(2)
circuit = cirq.Circuit(
    cirq.rx(0.1).on(a),
    cirq.rx(-0.72).on(b),
    cirq.rz(0.4).on(a),
    cirq.rz(0.2).on(b),
    cirq.CNOT.on(a, b),
    cirq.rx(-0.1).on(b),
    cirq.rz(-0.23).on(a),
    cirq.CNOT.on(b, a),
    cirq.rx(-0.112).on(a),
)
circuit
```

## Reusing CDR example simulator

Ideal simulator

```{code-cell} ipython3
def simulate(circuit: cirq.Circuit) -> np.ndarray:
    return mitiq_cirq.compute_density_matrix(circuit, noise_level=(0.0,))
```

Noisy executor (noisy simluator in this example)

```{code-cell} ipython3
def noisy_executor(circ: Circuit) -> np.ndarray:
    return mitiq_cirq.compute_density_matrix(circuit)
```

## Define observable

```{code-cell} ipython3
obs = Observable(PauliString("Z", support=(1,)))
```

## New sub-module: Learning the representations for each operation

```{code-cell} ipython3
representations = []
operations = convert_to_mitiq(circuit)
for operation in operations:
    # print(operation)
    representations.append(
        learn_representations(operation, simulate, noisy_executor, obs)
    )
```

```{code-cell} ipython3
pec_value, pec_data = pec.execute_with_pec(
    circuit=ideal_circuit,
    observable=obs,
    executor=noisy_executor,
    representations=representations,
    num_samples = 1000,
    full_output=True,
    random_state = np.random.RandomState(7)
)
```
